#!/bin/bash

# Common functions
pg_user_exists() { echo `sudo -u postgres psql postgres -c "select count(*) from pg_user where usename = '$1'" -P tuples_only=on`; }
pg_database_exists() { echo `sudo -u postgres psql postgres -c "select count(*) from pg_database where datname = '$1'" -P tuples_only=on`; }


# Cribbed from http://www.debian.org/doc/manuals/securing-debian-howto/ch9.en.html#s-bpp-lower-privs

#export DH_VERBOSE=1
set -x

case "$1" in
  configure)

  [ -f "/etc/default/dataflow-datastage" ] && source /etc/default/dataflow-datastage

  # create user to avoid running server as root
  # 1. create group if not existing
  if ! getent group | grep -q "^$SERVER_GROUP:" ; then
     echo -n "Adding group $SERVER_GROUP.."
     addgroup --quiet --system $SERVER_GROUP 2>/dev/null ||true
     echo "..done"
  fi
  # 2. create homedir if not existing
  test -d $SERVER_HOME || mkdir $SERVER_HOME
  # 3. create user if not existing
  if ! getent passwd | grep -q "^$SERVER_USER:"; then
    echo -n "Adding system user $SERVER_USER.."
    adduser --quiet \
            --system \
            --ingroup $SERVER_GROUP \
            --no-create-home \
            --disabled-password \
            $SERVER_USER 2>/dev/null || true
    echo "..done"
  fi
  # 4. adjust passwd entry
  usermod -c "$SERVER_NAME" \
          -d $SERVER_HOME   \
          -g $SERVER_GROUP  \
             $SERVER_USER
  # 5. adjust file and directory permissions
  if ! dpkg-statoverride --list $SERVER_HOME >/dev/null
  then
      chown -R $SERVER_USER:adm $SERVER_HOME
      chmod u=rwx,g=rxs,o= $SERVER_HOME
  fi

  # Add our four groups
  for x in leader collaborator member orphan ; do
    if ! getent group | grep -q "datastage-$x:" ; then
      addgroup --quiet --system datastage-$x 2>/dev/null || true
    fi
  done
  
  # Add an user to manage orphaned data
  useradd datastage_orphan --comment Orphaned-data -N -g datastage-orphan
  
  #Setup the python virtual environment
  echo "Setting python environment"
  virtualenv --no-site-packages /usr/share/dataflow-datastage/
  cd /usr/share/dataflow-datastage/
  . bin/activate
  
  easy_install -U distribute
  pip install -r requirements.txt
  
  python setup.py install
  ;;
esac




# Configure the database and database user
case "$1" in
  configure)

  if pg_database_exists $DATABASE_NAME | grep 0; then
    sudo -u postgres createdb $DATABASE_NAME
  fi

  if pg_user_exists $SERVER_USER | grep 0; then
    DB_PASSWORD=/var/lib/dataflow-datastage/database-password
    if [ ! -e $DB_PASSWORD ]; then
      mkdir -p `dirname $DB_PASSWORD`
    fi
    pwgen --secure 16 1 > $DB_PASSWORD
    sudo -u postgres psql $DATABASE_NAME -c "CREATE ROLE $SERVER_USER PASSWORD '`cat $DB_PASSWORD`' NOSUPERUSER NOCREATEDB NOCREATEROLE INHERIT LOGIN"
    sudo -u postgres psql $DATABASE_NAME -c "GRANT ALL ON DATABASE $DATABASE_NAME TO $SERVER_USER"
  fi

  sudo -u datastage /usr/share/dataflow-datastage/bin/django-admin.py syncdb --settings=datastage.web.settings --noinput
  
  ln -s /usr/share/dataflow-datastage/datastage/web/static/ /usr/share/dataflow-datastage/static
  ;;
esac


# Add the data structure.
case "$1" in
  configure)

  mkdir -p $DATA_DIRECTORY
  mkdir -p $DATA_DIRECTORY/private
  mkdir -p $DATA_DIRECTORY/shared
  mkdir -p $DATA_DIRECTORY/collab

  chgrp datastage-leader $DATA_DIRECTORY/private
  chgrp datastage-member $DATA_DIRECTORY/shared
  chgrp datastage-collaborator $DATA_DIRECTORY/collab
  ;;
esac


a2enmod proxy
a2enmod proxy_scgi

# If this is the first time we've been installed, start the longliving service
case "$1" in
    install)

    service datastage start
    ;;
esac

/usr/share/dataflow-datastage/bin/django-admin.py collectstatic --settings=datastage.web.settings --noinput --link

echo "Run datastage-config to complete the set-up"
